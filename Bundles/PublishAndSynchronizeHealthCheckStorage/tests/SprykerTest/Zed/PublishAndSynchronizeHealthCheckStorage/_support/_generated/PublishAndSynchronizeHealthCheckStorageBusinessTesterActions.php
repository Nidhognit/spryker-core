<?php  //[STAMP] 52bdf1a0ba2ab690883007a3246a3063
namespace SprykerTest\Zed\PublishAndSynchronizeHealthCheckStorage\_generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile

trait PublishAndSynchronizeHealthCheckStorageBusinessTesterActions
{
    /**
     * @return \Codeception\Scenario
     */
    abstract protected function getScenario();

    
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $key
     * @param array|bool|float|int|string $value
     *
     * @return void
     * @see \SprykerTest\Shared\Testify\Helper\LocatorHelper::setConfig()
     */
    public function setConfig(string $key, $value): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('setConfig', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $key
     * @param array|bool|float|int|string $value
     *
     * @return void
     * @see \SprykerTest\Shared\Testify\Helper\ConfigHelper::mockEnvironmentConfig()
     */
    public function mockEnvironmentConfig(string $key, $value): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('mockEnvironmentConfig', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $methodName
     * @param mixed $return
     * @param string|null $moduleName
     *
     * @throws \Exception
     *
     * @return \Spryker\Shared\Kernel\AbstractBundleConfig|null
     * @see \SprykerTest\Shared\Testify\Helper\ConfigHelper::mockConfigMethod()
     */
    public function mockConfigMethod(string $methodName, $return, ?string $moduleName = NULL): ?\Spryker\Shared\Kernel\AbstractBundleConfig {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('mockConfigMethod', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $methodName
     * @param mixed $return
     * @param string|null $moduleName
     *
     * @throws \Exception
     *
     * @return \Spryker\Shared\Kernel\AbstractSharedConfig|null
     * @see \SprykerTest\Shared\Testify\Helper\ConfigHelper::mockSharedConfigMethod()
     */
    public function mockSharedConfigMethod(string $methodName, $return, ?string $moduleName = NULL): ?\Spryker\Shared\Kernel\AbstractSharedConfig {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('mockSharedConfigMethod', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string|null $moduleName
     *
     * @return \Spryker\Shared\Kernel\AbstractBundleConfig
     * @see \SprykerTest\Shared\Testify\Helper\ConfigHelper::getModuleConfig()
     */
    public function getModuleConfig(?string $moduleName = NULL): \Spryker\Shared\Kernel\AbstractBundleConfig {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getModuleConfig', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string|null $moduleName
     *
     * @return \Spryker\Shared\Kernel\AbstractSharedConfig|null
     * @see \SprykerTest\Shared\Testify\Helper\ConfigHelper::getSharedModuleConfig()
     */
    public function getSharedModuleConfig(?string $moduleName = NULL): ?\Spryker\Shared\Kernel\AbstractSharedConfig {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getSharedModuleConfig', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $key
     *
     * @return void
     * @see \SprykerTest\Shared\Testify\Helper\ConfigHelper::removeConfig()
     */
    public function removeConfig(string $key): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('removeConfig', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets a class instance into the Locator cache to ensure the mocked instance is returned when
     * `$locator->moduleName()->type()` is used.
     *
     * !!! When this method is used the locator will not re-initialize classes with `new` but will return
     * always the already resolved instances. This can have but should not have side-effects.
     *
     * @param string $cacheKey
     * @param mixed $classInstance
     *
     * @return void
     * @see \SprykerTest\Shared\Testify\Helper\LocatorHelper::addToLocatorCache()
     */
    public function addToLocatorCache(string $cacheKey, $classInstance): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('addToLocatorCache', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return \Spryker\Shared\Kernel\LocatorLocatorInterface|\Generated\Zed\Ide\AutoCompletion|\Generated\Service\Ide\AutoCompletion|\Generated\Glue\Ide\AutoCompletion
     * @see \SprykerTest\Shared\Testify\Helper\LocatorHelper::getLocator()
     */
    public function getLocator() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getLocator', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string|null $moduleName
     *
     * @return \Spryker\Zed\Kernel\Business\AbstractFacade
     * @see \SprykerTest\Zed\Testify\Helper\Business\BusinessHelper::getFacade()
     */
    public function getFacade(?string $moduleName = NULL): \Spryker\Zed\Kernel\Business\AbstractFacade {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getFacade', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return void
     * @see \SprykerTest\Shared\Testify\Helper\DependencyHelper::clearFactoryContainerCache()
     */
    public function clearFactoryContainerCache(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('clearFactoryContainerCache', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $key
     * @param mixed $value
     * @param string|null $onlyFor
     *
     * @return void
     * @see \SprykerTest\Shared\Testify\Helper\DependencyHelper::setDependency()
     */
    public function setDependency(string $key, $value, ?string $onlyFor = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('setDependency', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $methodName
     * @param mixed $return
     * @param string|null $moduleName
     *
     * @throws \Exception
     *
     * @return \Spryker\Zed\Kernel\Business\AbstractFacade
     * @see \SprykerTest\Zed\Testify\Helper\Business\BusinessHelper::mockFacadeMethod()
     */
    public function mockFacadeMethod(string $methodName, $return, ?string $moduleName = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('mockFacadeMethod', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $methodName
     * @param mixed $return
     * @param string|null $moduleName
     *
     * @throws \Exception
     *
     * @return object|\Spryker\Zed\Kernel\Business\AbstractBusinessFactory
     * @see \SprykerTest\Zed\Testify\Helper\Business\BusinessHelper::mockFactoryMethod()
     */
    public function mockFactoryMethod(string $methodName, $return, ?string $moduleName = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('mockFactoryMethod', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $methodName
     * @param mixed $return
     * @param string|null $moduleName
     *
     * @throws \Exception
     *
     * @return object|\Spryker\Zed\Kernel\Business\AbstractBusinessFactory
     * @see \SprykerTest\Zed\Testify\Helper\Business\BusinessHelper::mockSharedFactoryMethod()
     */
    public function mockSharedFactoryMethod(string $methodName, $return, ?string $moduleName = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('mockSharedFactoryMethod', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string|null $moduleName
     *
     * @return \Spryker\Zed\Kernel\Business\AbstractBusinessFactory
     * @see \SprykerTest\Zed\Testify\Helper\Business\BusinessHelper::getFactory()
     */
    public function getFactory(?string $moduleName = NULL): \Spryker\Zed\Kernel\Business\AbstractBusinessFactory {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getFactory', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $key
     *
     * @return void
     * @see \SprykerTest\Client\Storage\Helper\StorageHelper::assertStorageHasKey()
     */
    public function assertStorageHasKey(string $key): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertStorageHasKey', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $key
     *
     * @return void
     * @see \SprykerTest\Client\Storage\Helper\StorageHelper::assertStorageNotHasKey()
     */
    public function assertStorageNotHasKey(string $key): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertStorageNotHasKey', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * This will clean-up the in-memory storage.
     *
     * @return void
     * @see \SprykerTest\Client\Storage\Helper\StorageHelper::cleanupInMemoryStorage()
     */
    public function cleanupInMemoryStorage(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('cleanupInMemoryStorage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return \Spryker\Client\Storage\StorageClientInterface
     * @see \SprykerTest\Client\Storage\Helper\StorageHelper::getStorageClient()
     */
    public function getStorageClient(): \Spryker\Client\Storage\StorageClientInterface {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getStorageClient', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $key
     * @param string $value
     * @param int|null $ttl
     *
     * @return void
     * @see \SprykerTest\Client\Storage\Helper\StorageHelper::mockStorageData()
     */
    public function mockStorageData(string $key, string $value, ?int $ttl = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('mockStorageData', func_get_args()));
    }
}
